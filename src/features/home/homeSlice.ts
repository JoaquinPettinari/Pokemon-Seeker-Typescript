import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../../app/store";
import { getPokemons } from "./homeAPI";

export interface HomeState {
   fetching: boolean;
   fetchingMorePoke: boolean;
   firstUpdate: boolean;
   error: boolean;
   data: {
      name: string;
      url: string;
   }[];
}

const initialState: HomeState = {
   fetching: false,
   fetchingMorePoke: false,
   firstUpdate: true,
   error: false,
   data: [],
};

export const fetchBasicPokemons = createAsyncThunk(
   "home/fetchingPokemones",
   async () => {
      const response = await getPokemons(0);
      return response.results;
   }
)

export const homeSlice = createSlice({
   name: "home",
   initialState,
   reducers: {
      findPokemon: (state, action) => {
         state.data = action.payload;
      },
      fetchingMorePokemons: (state) => {
         state.fetchingMorePoke = true;
      },
      addMorePokemons: (state, action) => {
         state.fetchingMorePoke = false;
         state.data = [...state.data, ...action.payload];
      }
   },
   // The `extraReducers` field lets the slice handle actions defined elsewhere,
   // including actions generated by createAsyncThunk or in other slices.
   extraReducers: (builder) => {
      builder
         .addCase(fetchBasicPokemons.pending, (state) => {
            state.fetching = true;
            state.error = false;
            state.firstUpdate = false
         })
         .addCase(fetchBasicPokemons.fulfilled, (state, action) => {
            state.fetching = false;
            state.data = action.payload;
         })
   },
});

export const { findPokemon, fetchingMorePokemons, addMorePokemons } = homeSlice.actions;

export const pokemons = (state: RootState) => state.pokemons;

export const findPokemonByName =
   (pokemonToFind: string): AppThunk =>
   (dispatch, getState) => {
      const pokemonsData = pokemons(getState());
      const pokemon = pokemonsData.data.filter(
         (pokemon) => pokemon.name === pokemonToFind
      );
      dispatch(findPokemon(pokemon || []));
};

export const fetchMorePokemons =
   (): AppThunk =>
   async (dispatch, getState) => {
      const { data } = pokemons(getState());
      dispatch(fetchingMorePokemons())
      const response = await getPokemons(data.length);
      dispatch(addMorePokemons(response.results))
      
};

export default homeSlice.reducer;
