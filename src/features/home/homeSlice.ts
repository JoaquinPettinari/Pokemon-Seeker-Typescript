import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../../app/store";
import { getAllPokemons } from "./homeAPI";

export interface HomeState {
   fetching: boolean;
   error: boolean;
   data: {
      name: string;
      url: string;
   }[];
}

const initialState: HomeState = {
   fetching: false,
   error: false,
   data: [],
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchAllPokemons = createAsyncThunk(
   "home/fetchingPokemones",
   async (limit: number) => {
      const response = await getAllPokemons(limit);
      // The value we return becomes the `fulfilled` action payload
      return response.results;
   }
);

export const homeSlice = createSlice({
   name: "home",
   initialState,
   reducers: {
      findPokemon: (state, action) => {
         state.data = action.payload;
      },
   },
   // The `extraReducers` field lets the slice handle actions defined elsewhere,
   // including actions generated by createAsyncThunk or in other slices.
   extraReducers: (builder) => {
      builder
         .addCase(fetchAllPokemons.pending, (state) => {
            state.fetching = true;
            state.error = false;
         })
         .addCase(fetchAllPokemons.fulfilled, (state, action) => {
            state.fetching = false;
            state.data = action.payload;
         });
   },
});

export const { findPokemon } = homeSlice.actions;

export const pokemons = (state: RootState) => state.pokemons;

export const findPokemonByName =
   (pokemonToFind: string): AppThunk =>
   (dispatch, getState) => {
      const pokemonsData = pokemons(getState());
      const pokemon = pokemonsData.data.filter(
         (pokemon) => pokemon.name === pokemonToFind
      );
      dispatch(findPokemon(pokemon || []));
   };

export default homeSlice.reducer;
